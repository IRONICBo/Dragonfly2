// Code generated by MockGen. DO NOT EDIT.
// Source: task.go
//
// Generated by this command:
//
//	mockgen -destination mocks/task_mock.go -source task.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	job "d7y.io/dragonfly/v2/internal/job"
	models "d7y.io/dragonfly/v2/manager/models"
	types "d7y.io/dragonfly/v2/manager/types"
	tasks "github.com/RichardKnop/machinery/v1/tasks"
	gomock "go.uber.org/mock/gomock"
)

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// DeleteTask mocks base method.
func (m *MockTask) DeleteTask(arg0 context.Context, arg1 []models.Scheduler, arg2 types.DeleteTaskArgs) (*tasks.Group, map[string]*job.DeleteTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(*tasks.Group)
	ret1, _ := ret[1].(map[string]*job.DeleteTaskResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskMockRecorder) DeleteTask(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTask)(nil).DeleteTask), arg0, arg1, arg2)
}

// GetTask mocks base method.
func (m *MockTask) GetTask(arg0 context.Context, arg1 []models.Scheduler, arg2 types.GetTaskArgs) (*tasks.Group, map[string]*job.GetTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(*tasks.Group)
	ret1, _ := ret[1].(map[string]*job.GetTaskResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskMockRecorder) GetTask(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTask)(nil).GetTask), arg0, arg1, arg2)
}
